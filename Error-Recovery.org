#+TITLE: Parsers Error Recovery for Practical Use
#+AUTHOR: Alexander Azarov
#+EMAIL: azarov@osinka.ru
#+DESCRIPTION: Slides for Scala.by 8
#+KEYWORDS: scala, parser, slides, presentation
#+LANGUAGE: ru
#+OPTIONS: H:3 toc:nil todo:nil pri:nil d:nil
#+STARTUP: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation, russian, notes=hide]
#+BEAMER_HEADER_EXTRA: \usetheme{Montpellier}\usecolortheme{seagull}\usefonttheme{structurebold}
#+BEAMER_FRAME_LEVEL: 2
#+LATEX_HEADER: \usepackage[utf8x]{inputenc}
#+LATEX_HEADER: \usepackage[T2A]{fontenc}
#+LATEX_HEADER: \usepackage[russian,english]{babel}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \lstdefinelanguage{scala}{morekeywords={class,case,object,trait,extends,with,lazy,new,override,if,while,for,def,val,var,this},otherkeywords={->,=>},sensitive=true,morecomment=[l]{//},morecomment=[s]{/*}{*/},morestring=[b]"}
#+LATEX_HEADER: \lstset{language=scala,columns=spaceflexible,basicstyle=\small,keywordstyle=\bfseries\ttfamily\color[rgb]{0,0,1},stringstyle=\ttfamily\color[rgb]{0.9,0.4,0},showstringspaces=false,tabsize=2}
#+LATEX_HEADER: \hypersetup{unicode,colorlinks=true,bookmarks}
#+LATEX_HEADER: \institute[\lstinline{azarov@osinka.ru / Osinka.ru}]{\lstinline{azarov@osinka.ru / Osinka.ru}}
#+LATEX_HEADER: \subject{Parsers Error Recovery for Practical Use}

* Meta                                                             :noexport:

После выступления Ильи я хочу вам рассказать о реальном примере
применения parser combinators в живом проекте.

У меня будет сугубо практический краткий доклад, чтобы показать зачем
могут быть нужны parser combinators, какие проблемы приходится решать
и что в результате получается.

** DONE Scala code 
** DONE Beamer blocks

* Context

** Osinka                                                           :B_frame:

*** Forum of "\*BB" kind
**** (2.5M+ pages/day, ~8M+ posts total)

  - User generated content: BBCode markup

*** Migrating to Scala

  - Backend

*** note                                                           :B_noteNH:

Осинка это сайт посвященный шитью, вязанию, рукоделиям и прочим
женским увлечениям. Большой частью сайта является форум, один из
крупнейших в Рунете по данной тематике -- около 1.5 млн уникальных
посетителей в месяц. Технически это форум вида "phpBB", с
соответствующим языком разметки для сообщений, BBCode.

Сейчас у нас хранится более 8 млн сообщений.

Некоторое время назад мы начали миграцию на Scala. И в первую очередь
начали переписывать backend. Поэтому в своем докладе я рассказываю про
production-использование Scala parser combinators, как одной из
технологий, которая у нас работает каждый день.

** BBCode                                                           :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Few BBCode tags                                                 :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

|                           |                                       |
| ~[b]bold[/b]~             | ~<b>bold</b>~                         |
| ~[i]italic[/i]~           | ~<i>italic</i>~                       |
| ~[url=href]text[/url]~    | ~<a href="href">text</a>~             |
| ~[img]href[/img]~         | ~<img src="href"/>~                   |

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Если кто-то не видел форумы и\или разметку BBCode, на этом слайде я
собрал некоторые элементы разметки, чтобы было понятно о чем мы
говорим. Теги в BBCode заключаются в квадратные скобки, закрывающий
тег имеет слэш перед именем тега (аналогично XML). Например, чтобы
выделить текст жирным шрифтом, используется тег =b=.

Бывают теги с аргументами, например =font= для того, чтобы выделить
текст цветом или =url=, чтобы написать ссылку.

** BBCode example                                                   :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** DONE example of BBCode

*** Example                                                         :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
#+BEGIN_LaTeX
\begin{lstlisting}[language=]
[quote="Nick"]
original [b]text[/b]
[/quote]
Here it is the reply with
[url=http://www.google.com]link[/url]
\end{lstlisting}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Пример валидного текста на BBCode. 

* Task

** Why parser combinators, 1                                        :B_frame:

*** Regexp maintenance is a headache
*** Bugs extremely hard to find
*** No markup errors

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Итак, зачем нам нужны parser combinators? Я попытаюсь объяснить
мотивацию перехода на них. Самое очевидное, что раз наш backend
на Scala, то разнообразные офлайн-задачи (как-то посылка уведомлений)
имеет смысл делать именно на backend. (и так и делается).

Но если говорить о преимуществах самих по себе, то, во-первых,
избавиться от regexp'ов само по себе счастье. Поддерживать сложные
правила regexp довольно непросто, также очень сложно искать в них
баги. Система, построенная на regexp, не позволяет давать какие-либо
сообщения об ошибках в разметке. Более того, если нам нужно
преобразовать одну и ту же разметку в разные представления (например,
HTML и text), это зачастую приходится делать разными наборами regexp.

** Why parser combinators, 2                                        :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** One post source, many views                                     :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

  - HTML render for Web
  - textual view for emails
  - text-only short summary
  - text-only for full-text search indexer

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Во-вторых, очень удобно иметь одно синтаксическое дерево распарсенного
сообщения, чтобы с ним можно было делать разнообразные операции: 

 - создавать HTML отображение для показа веб-страниц. Это разумеется
   самое очевидное.
 - мы также хотим создавать текстовое отображение, адаптированное для
   посылки email уведомлений (зачастую эта задача решается другим
   способом на форумах -- либо посылается напрямую bbcode, либо
   отсылается HTML вариант; я выбрал отсылку обработанного текстового
   варианта)
 - мы умеем создавать текстовый короткий анонс, который может
   использоваться в местах, где имеет смысл отобразить очень кратко
   текст сообщения (аналог -- первая строка емейла в интерфейсах
   веб-почты типа Gmail). Смысл тут в том, что нужно вырезать все, что
   собственно к тексту сообщения не имеет отношения, как-то цитаты,
   картинки и т.п.
 - мы также хотим уметь создавать такое текстовое представление,
   которое удобно отдать индексатору полнотекстового поиска


** Why parser combinators, 3                                        :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Post analysis algorithms                                        :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

  - links (e.g. spam automated analysis)
  - images
  - whatever structure analysis we'd want

*** note                                                           :B_noteNH:

По мере того, как мы переносили все больше обработки на backend, например, в
какой-то момент мы ввели в действие автоматический анализатор спама,
потому что популярные форумы быстро становятся также популярны и у
спамеров. Так вот анализатор он вытаскивает информацию (ссылки и т.п.)
из синтаксического дерева сообщения.

Помимо анализатора спама мы из дерева извлекаем ссылки на
картинки. Это позволяет нашему форуму индексировать все размещенные в
сообщениях картинки.

Это третья причина -- дерево позволяет писать алгоритмы анализа.

** Universal AST                                                    :B_frame:

*** One AST                                                         :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

**** different printers

**** various traversal algorithms

*** note                                                           :B_noteNH:

Таким образом, как результат выполнения parser combinators мы получаем
универсальное дерево AST, которое "скармливаем" разным принтерам и
алгоритмам обхода.

Очевидные преимущества -- один алгоритм разбора и алгоритмы
разделены друг от друга и могут развиваться и разрабатываться независимо.

* Problem

** Sounds great. But.                                               :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

#+BEGIN_CENTER
*This all looks like a perfect world.*

*But what's the catch??*
#+END_CENTER

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Казалось бы все выглядит замечательно. Но, поскольку это production,
должны быть проблемы, чтобы было что решать инженерам. Проблемы есть.

** Sounds great. But.                                               :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Humans.                                                         :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_envargs: C[t]
    :BEAMER_col: 0.5
    :END:

They do mistakes.

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Самая первая проблема -- контент создают люди. И User Generated
Content обладает существенным недостатком -- люди совершают
ошибки. Они постоянно делают ошибки в разметке.

*** Example                                                         :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_envargs: <2->
    :BEAMER_col: 0.5
    :END:

#+NAME: errmarkup.bbcode
#+BEGIN_LaTeX
\begin{lstlisting}[language=]
[quote]
[url=http://www.google.com]
[img]http://www.image.com
[/url[/img]
[/b]
\end{lstlisting}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Эти ошибки иногда кажутся удивительными, но надо понимать, что
квалификация пользователей форума бывает разная и некоторые даже не
понимают значения "закорючек" BBCode.

** User-Generated Content: Problem                                  :B_frame:

*** Erroneous markup                                                :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

 - People do mistakes,
 - But no one wants to see empty post,
 - We have to show something meaningful in any case

*** note                                                           :B_noteNH:

Следовательно, наша библиотека  должна быть готова к тому, что
на входе будет невалидный bbcode.

Причем, несмотря на то, что люди совершают ошибки в разметке, наша задача
что-то показать даже если сообщение содержит невалидный
BBCode. Желательно, чтобы это было что-то осмысленное. Важее всего не
показать "пустоту", этого люди не терпят и не понимают.

** Black or White World                                             :B_frame:

*** Scala parser combinators assume valid input

**** Parser result: =Success= =|= =NoSuccess=

 - no error recovery out of the box

*** note                                                           :B_noteNH:

Это порождает техническую проблему. Традиционно Scala parser
combinators возвращают "черно-белый" результат: все или ничего. Либо
разбор удался (что означает валидность текста относительно заданного
parser), либо не удался (невалидность).

Иначе говоря, устойчивость к ошибкам в стандартных parser combinators
отсутствует напрочь.

* Solution

** Error recovery: our approach                                     :B_frame:

*** Our Parser never breaks

*** It generates "error nodes" instead

*** note                                                           :B_noteNH:

Какой у нас подход. Мы используем стандартную библиотеку, но описываем
parser так, чтобы он никогда не "ломался", т.е. не возвращал ошибочное
состояние.

С точки зрения нашего parser любой input валиден. Но, если он видит
ошибки, он возвращает специальный узел.

** Approach: Error nodes                                            :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Part of AST, =FailNode= contains the possible causes of the failure

*** They are meaningful
    :PROPERTIES:
    :END:

  - for highlighting in editor
  - to mark posts having failures in markup (for moderators/other
    users to see this)

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Важно понимать, что =FailNode= это часть синтаксического дерева и его
получит любой printer или алгоритм обхода.

Эти узлы несут важную информацию -- предполагаемую причину ошибки и
собственно ту "сырую" разметку, которая вызвала эту ошибку. Такую
информацию можно использовать для подсветки неверного ввода в
редакторе или для того, чтобы отмечать сообщения с неверным BBCode на
форуме (чтобы модераторы и пользователи видели)

** Approach: input & unpaired tags                                  :B_frame:

*** Assume all input except tags as text

**** E.g. ~[tag]text[/tag]~ is a /text/ node

*** Unpaired tags as the last choice: markup errors

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Главной частью этого общего подхода к написанию "неломающегося" parser
являются parsers для "одиноких" открывающих или закрывающих
тегов. Если такой parser срабатывает, это означает, что мы не смогли
найти парный тег. Такие parsers всегда последние в списке
вариантов. По сути они съедают входной поток до того момента, когда
можно будет продолжить разбор дальше.

При этом мы считаем текстом все, что не является открывающими или
закрывающими тегами. Таким образом, можно сказать, что ошибочный
контент это лишние теги, что меня полностью устраивает.

* Example

** Example                                                          :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

#+BEGIN_CENTER
*Example*
#+END_CENTER

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Чтобы продемонстрировать, как это все работает, я покажу на простых
примерах как простейший parser, так и его recovering модификацию.

** Trivial BBCode markup                                            :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Trivial "one tag" BBCode                                      :B_example:
    :PROPERTIES:
    :BEAMER_env: example
    :END:

#+NAME: example.bbcode
#+BEGIN_LaTeX
\begin{lstlisting}[language=]
Simplest [font=bold]BBCode [font=red]example[/font][/font]
\end{lstlisting}
#+END_LaTeX

 - has only one tag, =font=
 - though it may have an argument

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Будем смотреть на все это на примере простейшей разметки BBCode,
состоящей из одного тега font. Правда, у него может быть alphanumeric
агрумент (например, стиль шрифта или цвет).

** Corresponding AST                                                :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** AST                                                             :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+NAME: parserSpec.scala
#+BEGIN_LaTeX
\lstinputlisting[language=scala,firstline=4,lastline=7,breaklines=true]{src/test/scala/AST.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Соответствующий AST будет состоять всего из трех классов. Видно, что
внутри =font= может быть список узлов.

** Parser                                                           :B_frame:

*** BBCode parser                                                   :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
#+NAME: parserSpec.scala
#+BEGIN_LaTeX
\lstinputlisting[language=scala,firstline=11,lastline=22,emptylines=0,breaklines=true]{src/test/scala/parserSpec.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Собственно parser, который читает такой bbcode и возвращает дерево, на
экране. Это самый важный фрагмент, полный код немногим длиннее. Тут
все достаточно очевидно, мы разбираем последовательность узлов текста
либо шрифта.

** Valid markup                                                     :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Scalatest                                                       :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+NAME: CommonSpec.scala
#+BEGIN_LaTeX
\lstinputlisting[language=scala,firstline=9,lastline=19,emptylines=0,breaklines=true]{src/test/scala/CommonSpecs.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Приблизительно так выглядят тесты парсера для валидной разметки, они успешно
проходят.

** Invalid markup                                                   :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Scalatest                                                       :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+NAME: parserSpec.scala
#+BEGIN_LaTeX
\lstinputlisting[language=scala,firstline=34,lastline=39,emptylines=0,breaklines=true]{src/test/scala/parserSpec.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Однако парсер не сможет разобрать ошибочный BBCode,
с излишним открытым font или наоборот лишним закрывающим.

Что мы и видим на слайде.

Как мы сделаем error recovery для этого парсера? Рассказываю по шагам.

** Recovery: Extra AST node                                         :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** FailNode                                                        :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+NAME: recoverySpec.scala
#+BEGIN_LaTeX
\lstinputlisting[language=scala,firstline=6,lastline=6]{src/test/scala/recoverySpec.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Во-первых, мы вводим специальный узел дерева, =FailNode=. В нем
мы храним причину ошибки и собственно разметку, которая вызвала ошибку.

** Recovery: helper methods                                         :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Explicitly return =FailNode=                    :B_ignoreheading:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+NAME: recoverySpec.scala
#+BEGIN_LaTeX
\lstinputlisting[language=scala,firstline=28,lastline=28]{src/test/scala/recoverySpec.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Для упрощения написания parsers у нас будет пара helper
методов. Первый возвращает =FailNode= с описанием ошибки. На этапе
вызова этого метода сама разметка, которая вызвала ошибку, нам
неизвестна, поэтому мы смело создаем =FailNode= с пустой строкой в
переменной разметки.

Этот метод мы будем использовать, чтобы явно создать "ошибочный" узел.

*** Enrich =FailNode= with markup                                   :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+NAME: recoverySpec.scala
#+BEGIN_LaTeX
\lstinputlisting[language=scala,firstline=16,lastline=24,breaklines=true]{src/test/scala/recoverySpec.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Второй helper -- это /wrapper/ вокруг =Parser[Node]=. Аргументом он
принимает parser, типом которого является =Node=, запускает его и
смотрит на результат. Если результатом является наш =FailNode=, то
=recover= добавляет в =FailNode= "сырую" разметку, которая
использовалась для разбора.

Этот helper мы будем использовать вокруг других parsers.

** Recovery: Parser rules                                           :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

 - never break (provide "alone tag" parsers)
 - return =FailNode= explicitly if needed

*** nodes                                                           :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
#+NAME: recoverySpec.scala
#+BEGIN_LaTeX
\lstinputlisting[language=scala,firstline=30,lastline=31,breaklines=true,frames=tb]{src/test/scala/recoverySpec.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

При написании parsers будем помнить основные правила:
 - не допускать настоящих ошибок, =NoSuccess=, и чтобы не допустить
   этого, нужно предоставлять parsers для случаев отстутствующих
   открывающих или закрывающих тегов
 - вместо этого вызывать метод =failed=

Наш модифицированный parser будет выгляеть аналгично "обычному", но мы
добавим parsers для случаев, когда отсутствует открывающий либо
закрывающий тег.

** "Missing open tag" parser                                        :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Catching alone =[/font]=                                        :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+NAME: recoverySpec.scala
#+BEGIN_LaTeX
\lstinputlisting[language=scala,firstline=46,lastline=48]{src/test/scala/recoverySpec.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Когда мы встречаем закрывающий тег "невовремя", это означает, что
отсутствует открывающий и мы об этом сообщаем с помощью метода =failed=

Поскольку весь parser "обернут" в =recover=, результирующий =FailNode=
будет содержать как причину, так и ошибочную разметку.

** Argument check                                                   :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** =font= may have limits on argument                              :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+NAME: recoverySpec.scala
#+BEGIN_LaTeX
\lstinputlisting[language=scala,firstline=38,lastline=44,breaklines=true]{src/test/scala/recoverySpec.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Более сложный пример -- допустим мы хотим проверять, верный ли
аргумент у тега. Для реалистичности предположим, что аргумент =font=
может либо отстутствовать, либо принимать определенные значения.
Выглядеть это будет так.

** Passes markup error tests                                        :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Scalatest                                                       :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+NAME: CommonSpec.scala
#+BEGIN_LaTeX
\lstinputlisting[firstline=64,lastline=74,emptylines=0,breaklines=true]{src/test/scala/recoverySpec.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Примеры тестов, которые проходит такой recovery parser и какой вывод
он дает.

** Passes longer tests                                              :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** Scalatest                                                       :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

#+NAME: CommonSpec.scala
#+BEGIN_LaTeX
\lstinputlisting[firstline=80,lastline=88,emptylines=0,breaklines=true]{src/test/scala/recoverySpec.scala}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Чуть более длинные тесты.

** Examples source code                                             :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

 - Source code, specs: https://github.com/alaz/slides-err-recovery

#+BEGIN_LaTeX
\begin{tikzpicture}[remember picture,overlay]
  \node [xshift=-1.5cm,yshift=-2.56cm] at (current page.north east)
    {\includegraphics[width=3cm,height=3cm]{github.png}};
\end{tikzpicture}
#+END_LaTeX

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Весь исходный код парсеров и unit тесты можно найти на GitHub, вместе
с текстом презентации и PDF.

Parser, который работает у нас в production, хоть и сложнее, но
базируется именно на тех идеях, которые я выше вам рассказал. Помимо
безусловно полезных фич, которые мы строим на его основе, есть и
некоторые проблемы.

* Results

** Performance                                                      :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

*** The biggest problem is performance.

Scala parser combinators are very slow compared to the original
*phpBB* BBCode parsing via regexp.
 
*** Benchmarks                                                      :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

|               | Scala  | PHP   |
|---------------+--------+-------|
| /             | <      | >     |
| Typical 8k    | 51ms   | 5.3ms |
| Big w/err 76k | 1245ms | 136ms |

*** Workaround: caching

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Основная проблема в том, что Scala Parser Combinators очень медленны
по сравнению с оригинальным разбором BBCode в форумных движках. Расход
памяти также не радует. В таблице я привел две строки.

Строки соответствуют размеру сообщения. 8 КБ сообщение нельзя назвать
небольшим, но все же оно довольно типично. 76 КБ это очень большое
сообщение, к тому же оно содержит ошибки. Сравнить Scala и PHP
корректно невозможно, потому что PHP не строит синтаксическое дерево,
соответственно функционально я тестирую совершенно разные
вещи. Сравнить можно только разве что с той точки зрения, что нам в
любом случае надо показать HTML.

Соответветственно я замерял построение AST в Scala и преобразование
BBCode в HTML в PHP.

Хорошая новость, что, поскольку люди намного чаще смотрят, нежели
пишут, сгенерированный HTML можно и нужно кэшировать, что несколько
нивелирует эту проблему.

И, тем не менее, задержка в секунды для больших сообщений это
неприятность, потому что по крайней мере человек, который написал
сообщение, ожидает его увидеть, иначе у него возникает вполне
естественное здоровое предположение, что отправить сообщение не
удалось.

** Thank you                                                        :B_frame:
   :PROPERTIES:
   :BEAMER_env: frame
   :END:

 - Email: azarov@osinka.ru
 - Twitter: http://twitter.com/aazarov
 - Source code, specs: https://github.com/alaz/slides-err-recovery

*** note                                                           :B_noteNH:
    :PROPERTIES:
    :BEAMER_env: noteNH
    :END:

Спасибо всем за внимание. Вопросы?
